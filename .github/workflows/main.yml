name: Python CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-style-check:
    name: Lint and Style Check
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Cache dependencies
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run flake8 for linting
      - name: Run Flake8
        run: flake8 .
        env:
          MAX_LINE_LENGTH: 88 # Example: Configure line length

      # Run Black for code formatting check
      - name: Run Black
        run: black --check .

      # Run Pylint for more detailed linting
      - name: Run Pylint
        run: pylint $(find . -name "*.py")
        continue-on-error: false # Fails pipeline if linting fails

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-style-check
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run Tests
      - name: Run Unit Tests
        run: |
          pytest --cov=.

      # Upload coverage report 
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
